* httptune网络服务器模型
* 事件处理
  nginx处理的事件包括三种：网络事件、定时器和信号。
* 开发
  迭代服务器
** 原型
   HTTP是一个请求响应式的服务器，所以应该 一开始把这个东西完成。监听请求再响应的逻辑。先是无状态的，所以监听了请求。
   由于默认端口80已经被占用了，所以需要能设定端口的程序。
   初期命令行参数设定为
   #+BEGIN_SRC sh
   httptune <port>   
   #+END_SRC
   同时使用CMake来组织项目
   设计到错误处理，先包装一个统一的错误处理函数。
   这里还是一个迭代服务器
** 原型2
   迭代服务器不擅长处理并发的情形，这里先用多进程来完成
** 原型3
   使用多进程的一个问题是，如果要同时处理读写，一个阻塞的执行流是不够的。执行流被阻塞的时候比较麻烦，所以再开一个执行流也会有问题，所以使用IO复用技术，这样其实也没必要多开线程或者进程了。
* Web服务器设计要点
** 网络性能
   一个服务器的最大吞吐量受限于网络带宽。当然实际上，多数时候我们都达不到。
** 单次请求的延迟
   高并发情况下单次请求的延迟会比较高，服务器应该尽量使这个延迟小。
** 网络效率
   如使用长连接来替代短连接，关闭连接来完成吞吐量下的携带信息
* 原则
  - 异常处理不暴露在主流程中，除非特别简单，
* epoll、信号和可重入
  epoll作为一个系统调用，也会被信号中断，这时会返回一个错误，需要处理。
* nginx和lighttp
  这两个都是高性能的http服务器，在中国nginx更加出名。像Tomcat属于重量级服务器，性能是不能相提并论的。
* nginx参考
  目前nginx服务器作为主要的参考，httptune需要能够处理高并发才可行。
** connection
   connection是对TCP连接的封装，其中包括连接的socket，读事件、写事件。利用nginx封装的connection，我们可以很方便地使用nginx来处理和连接相关的事情。利用nginx的connection可以和任何后端服务器打交道。
   作为客户端的时候http先创建一个connection结构体，之后创建socket，设置socket属性。
** request
   nginx通过ngx_http_request_t来保存解析请求于输出响应相关的数据。
   需要注意的是字符串其实比较起来还是比较花时间的，所以经常会将其字符串改成数字之后再进行比较。
*** nginx处理一个完整的请求
    从ngx_http_iinit_request开始，在这个函数中设置读事件为ngx_http_request_line，也就是说，接下来的。也就是说接下来的事件会有ngx_http_request_line来执行，这个处理函数处理完毕之后必要的信息会被保存到request的结构体中，之后会设置读事件的handler为ngx_http_process_request_headers，然后后续的请求就在其中进行解析。之后会被解析道request的结构体中，使用链表的方式存储。有些请求头会被特别处理，也就是在解析的过程会检查头部，如果满足要求，就会调用响应的处理函数。
    之所以这样是因为这本来就是分阶段的东西
*** keepalive
    一般来说如果一个请求有body（如POST），那么客户端就需要在请求头中指定content-length来的表明body的大小，否则返回400错误。请求是这样，那么如果是响应呢？
    1) HTTP 1.0协议说，如果响应头中有content-length头，则以content-length长度就可以知道什么时候接受完成，如果没有content-length头，则客户端会一直接受数据据，知道服务端主动断开，才表示body接收完毕。
    2) 对于HTTP 1.1则多了一种情况，如响应头中的Transfer-encoding是chunked传输的，则表示body是流式传输的，body会被分成多块，每个块会被标识出当前块的长度，就不需要通过长度来指定了。如果是非chunked来传输，则和HTTP 1.0 相同。
    一个请求响应序列是必要的，所以考虑是否keepalive要在处理完第一个请求之后，如果请求头connection为close就在响应后关闭连接，如果是keepalive就保持连接。如果没有这个字段，就看HTTP协议的版本，如果是1.0就关闭连接，如果是1.1就keepalive。当然不能一直保持keepalive，所以需要一个定时器，如果超过某个事件就关闭连接。如果这个超时时间设置成0，那么就是默认不keepalive。
    响应的信息里面也会有服务器是否keepalive的信息。connection如果是close就会关闭，如果是keepalive就保持连接。对于访问量比较大的服务器来说，保持连接可以节约很多资源。
** 模块
   Nginx是高度模块化的设计，除了少量核心的代码以外，一切皆模块。类似的概念有Python一切皆对象和Linux的一切皆文件。这些概念要实现，一个重要的特点是不能有太多限制。Linux文件是由几个简单的接口定义的，而Python的对象是指有type和能被回收的东西。所以Nginx的模块定义显然也不会太复杂，模块的接口定义由一个结构体定义：
   #+BEGIN_SRC C
     struct ngx_module_s {
         ngx_uint_t            ctx_index;
         ngx_uint_t            index;

         char                 *name;

         ngx_uint_t            spare0;
         ngx_uint_t            spare1;

         ngx_uint_t            version;
         const char           *signature;

         void                 *ctx;
         ngx_command_t        *commands;
         ngx_uint_t            type;

         ngx_int_t           (*init_master)(ngx_log_t *log);

         ngx_int_t           (*init_module)(ngx_cycle_t *cycle);

         ngx_int_t           (*init_process)(ngx_cycle_t *cycle);
         ngx_int_t           (*init_thread)(ngx_cycle_t *cycle);
         void                (*exit_thread)(ngx_cycle_t *cycle);
         void                (*exit_process)(ngx_cycle_t *cycle);

         void                (*exit_master)(ngx_cycle_t *cycle);

         uintptr_t             spare_hook0;
         uintptr_t             spare_hook1;
         uintptr_t             spare_hook2;
         uintptr_t             spare_hook3;
         uintptr_t             spare_hook4;
         uintptr_t             spare_hook5;
         uintptr_t             spare_hook6;
         uintptr_t             spare_hook7;
     };

   #+END_SRC
   可以看到有type字段，所以可以定义模块的类型。其他的模块都是定义为这个类型，像配置模块ngx_conf_module就是nginx_module_t的：
   #+BEGIN_SRC C
     ngx_module_t  ngx_conf_module = {
         NGX_MODULE_V1,
         NULL,                                  /* module context */
         ngx_conf_commands,                     /* module directives */
         NGX_CONF_MODULE,                       /* module type */
         NULL,                                  /* init master */
         NULL,                                  /* init module */
         NULL,                                  /* init process */
         NULL,                                  /* init thread */
         NULL,                                  /* exit thread */
         ngx_conf_flush_files,                  /* exit process */
         NULL,                                  /* exit master */
         NGX_MODULE_V1_PADDING
     };
   #+END_SRC
   需要注意的是配置模块是最底层的模块，其中其他模块都会使用ngx_conf_module来实现模块的功能。其类型是NGX_CONF_MODULE。
   那么我们要如何在这个模块的基础上加入自己东西呢，其实关键在ngx_module_t结构体中的ctx字段上，每个模块在这个字段定义自己的字段
*** 核心模块
    除了配置模块以外，之后就是核心模块了。其类型是NGX_CONF_MODULE，目前这个类型官方有6种模块：
    1) ngx_core_module
    2) ngx_errlog_module
    3) ngx_events_module
    4) ngx_openssl_module
    5) ngx_http_module
    6) ngx_mail_module

*** 重要的模块类型
    nginx提供了强大的模块系统，官方Nginx主要有五大模块：核心模块、配置模块、事件模块、HTTP模块、mail模块，虽然都具备相同ngx_module_t接口，但在请求处理流程中的层次不相同。ngx_module_t提供了7个接口，但有几个是不使用的。ngx_module_t是模块。
*** 关于事件驱动模型
    一般来说处理TCP连接，尤其是多个的时候，一般会用poller来处理事件，就这一点上讲也可以算是事件驱动的方式，当然仅限于处理TCP连接的模式。把事件对应于任务，那么就是一个生产者消费者问题，产生事件的作为生产者，而消费事件的就是事件处理函数。Nginx的特点是程序的逻辑完全使用事件驱动的模式来组织，而不是仅限于处理TCP连接。在Apache httpd中就是使用线程或者进城作为TCP连接建立事件的消费者。事件消费者只能是否个模块，而不是具体到线程或者进程。只有事件收集分发器才能占用资源，分发事件的时候才调用相应的模块来处理。完全使用一个事件收集分发器来处理的一个问题是不能有一个事件处理模块阻塞，否则会长时间占用那个进程造成，导致其他事件得不到响应。要编写这样的异步代码，是非常复杂的，而且需要比较小心，所以我推荐
*** 请求的多阶段异步处理
    处理一个请求不能占用进程资源太多时间，如果是用进程来处理连接，那么可以使用操作系统的调度器来保证这一点，但是如果使用事件驱动式的就需要在编程的时候多加注意，不能写出阻塞的代码。
*** 事件收集分发器
    这里的问题是事件的定义，这个事件收发器能够处理的事件可能不像我们想的那样多。
*** Nginx框架中的核心结构体
    由于事件驱动模型本身需要对于进程的执行流有较大的控制权，所以Nginx使用结构体ngx_cycle_t来控制进程的工作流程。
**** ngx_listening_t
     每个ngx_listening_t都代表一个Nginx服务器监听的端口
**** ngx_cycle_t
     Nginx围绕着这个结构体开控制进程，conf_file、conf_prefix、prefix代表这事件的触发。我们知道Nginx都会使用一个配置模块，各个模块的配置也会依赖于nginx.conf，所以最好是建立一个连接。所以这个应该在进程的配置资源中。读取了nginx.conf中的配置之后就是。之后会根据这些信息来完成对于相关模块的加载。这个步骤会在ngx_init_cycle函数中完成。
     #+BEGIN_SRC C
       struct ngx_cycle_s {
           /*保存着所有模块存储配置项*/
           void                  ****conf_ctx;
           // 内存池
           ngx_pool_t               *pool;

           //
           ngx_log_t                *log;
           ngx_log_t                 new_log;

           ngx_uint_t                log_use_stderr;  /* unsigned  log_use_stderr:1; */

           ngx_connection_t        **files;
           ngx_connection_t         *free_connections;
           ngx_uint_t                free_connection_n;

           ngx_module_t            **modules;
           ngx_uint_t                modules_n;
           ngx_uint_t                modules_used;    /* unsigned  modules_used:1; */

           ngx_queue_t               reusable_connections_queue;
           ngx_uint_t                reusable_connections_n;

           ngx_array_t               listening;
           ngx_array_t               paths;

           ngx_array_t               config_dump;
           ngx_rbtree_t              config_dump_rbtree;
           ngx_rbtree_node_t         config_dump_sentinel;

           ngx_list_t                open_files;
           ngx_list_t                shared_memory;

           ngx_uint_t                connection_n;
           ngx_uint_t                files_n;

           ngx_connection_t         *connections;
           ngx_event_t              *read_events;
           ngx_event_t              *write_events;

           ngx_cycle_t              *old_cycle;

           ngx_str_t                 conf_file;
           ngx_str_t                 conf_param;
           ngx_str_t                 conf_prefix;
           ngx_str_t                 prefix;
           ngx_str_t                 lock_file;
           ngx_str_t                 hostname;
       };

     #+END_SRC
** Nginx正常启动流程
   正常启动流程，
   1) 根据命令行得到配置文件路径
   2) 如果在升级中就监听环境变量中传递的监听句柄
   3) 调用所有核心模块的create_conf方法，生成存放配置项的方法
   4) 针对所有核心模块解析nginx.conf配置文件
   5) 调用所有核心模块的init_conf方法
   6) 创建目录、打开文件、初始化共享内存等进程间通信方式
   7) 打开由各Nginx模块从配置文件读取到的监听端口
   8) 调用所有模块的init_module方法

* 接口的使用
** sendfile
   nginx用到了这个，可以把磁盘上的数据直接发送到网络上，不用经过用户态内存
** send
   如果是阻塞的接口，一般来说会导致进程休眠而不是空转。
* 信号量和互斥锁
  信号量有两种实现，一种是System V，一种是POSIX信号量，POSIX信号量更加有用一点，性能也要高出XSI信号量多一些。其中POSIX匿名信号量更加好用一点。需要注意的是信号量无论内部是如何实现的，都至少为维护一个正整数量，可以通过sem_getvalue来获取，当然这只是一个调试的接口，不能保证读到的时候值没有改变。匿名信号量用于线程同步会方便很多。
* TCP协议和Nginx
  Web服务器一般需要处理TCP和HTTP两个协议，可以认为SYN包是发起连接的包，内核在我们调用了listen的时候就已经为监听端口建立了SYN队列和ACCEPT队列，客户端连接的时候发起SYN包，内核会把信息放到SYN队列中，之后发送回一个ACK+SYN包给客户端，之后等到客户端发回ACK包才会把 *连接* 从SYN队列取出放到ACCEPT队列中。（需要注意的是连接信息其实已经包含在SYN包里面了，使用里面的信息足以建立连接了）。连接会先被放到syn队列中，收到ACK包后放到accept队列中。所以accept只是从accept队列中取出连接而已。如果有大量连接。
* Nginx HTTP框架的初始化
  Nginx的HTTP框架大致由一个核心模块、两个HTTP模块组成的
  
* 问题
  - 核心的问题是静态的东西如何处理动态的逻辑。
  - 异步的逻辑目前在我看来一大优势是利用CPU，而另一个问题是内存
  - 
